scalar DateTime
scalar Upload
# scalar Float


type User {
  id: String!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PasswordChange {
  id: String!
  user: String!
  token: String!
  createdAt: DateTime!
}

type Token {
  id: String!
  user: String!
  accessToken: String!
  refreshToken: String!
  accessTokenExpiry: DateTime!
  refreshTokenExpiry: DateTime!
  device: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NewUser {
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}


type Query {
  user: User!
}

type Mutation {
  register(input: NewUser!): User!
  loginWithEmailPassword(email:String!, password:String!, token:String!):Token!
  changePassword(token: String!, newPassword: String!): Boolean!
  requestChangePassword(token: String!, email: String!): Boolean!
  refreshToken(
    accessToken: String!
    refreshToken: String!
    device: String!
  ): Token!
  
  someMethod(input: String!): String!
}
